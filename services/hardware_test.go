// AUTO GENERATED by tools/loadmeta.go
package services_test

import (
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/softlayer/softlayer-go/services"
	"github.com/softlayer/softlayer-go/session/sessionfakes"
)

var _ = Describe("Hardware Tests", func() {
	var slsession *sessionfakes.FakeSLSession
	BeforeEach(func() {
		slsession = &sessionfakes.FakeSLSession{}
	})

	Context("Testing SoftLayer_Hardware service", func() {
		var sl_service services.Hardware
		BeforeEach(func() {
			sl_service = services.GetHardwareService(slsession)
		})
		Context("SoftLayer_Hardware Set Options", func() {
			It("Set Options properly", func() {
				t_id := 1234
				t_filter := "{'testFilter':{'test'}}"
				t_limit := 100
				t_offset := 5
				sl_service = sl_service.Id(t_id).Filter(t_filter).Offset(t_offset).Limit(t_limit)
				Expect(sl_service.Options.Id).To(HaveValue(Equal(t_id)))
				Expect(sl_service.Options.Filter).To(HaveValue(Equal(t_filter)))
				Expect(sl_service.Options.Limit).To(HaveValue(Equal(t_limit)))
				Expect(sl_service.Options.Offset).To(HaveValue(Equal(t_offset)))
			})
		})
		Context("SoftLayer_Hardware Set Mask", func() {
			It("Set Options properly", func() {
				t_mask1 := "mask[test,test2]"
				sl_service = sl_service.Mask(t_mask1)
				Expect(sl_service.Options.Mask).To(HaveValue(Equal(t_mask1)))
				// Mask("test,test2") should set the mask to be "mask[test,test2]" aka t_mask1
				sl_service = sl_service.Mask("test,test2")
				Expect(sl_service.Options.Mask).To(HaveValue(Equal(t_mask1)))
			})
		})
		Context("SoftLayer_Hardware::getObject", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetObject()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
	})

	Context("Testing SoftLayer_Hardware_Server service", func() {
		var sl_service services.Hardware_Server
		BeforeEach(func() {
			sl_service = services.GetHardwareServerService(slsession)
		})
		Context("SoftLayer_Hardware_Server Set Options", func() {
			It("Set Options properly", func() {
				t_id := 1234
				t_filter := "{'testFilter':{'test'}}"
				t_limit := 100
				t_offset := 5
				sl_service = sl_service.Id(t_id).Filter(t_filter).Offset(t_offset).Limit(t_limit)
				Expect(sl_service.Options.Id).To(HaveValue(Equal(t_id)))
				Expect(sl_service.Options.Filter).To(HaveValue(Equal(t_filter)))
				Expect(sl_service.Options.Limit).To(HaveValue(Equal(t_limit)))
				Expect(sl_service.Options.Offset).To(HaveValue(Equal(t_offset)))
			})
		})
		Context("SoftLayer_Hardware_Server Set Mask", func() {
			It("Set Options properly", func() {
				t_mask1 := "mask[test,test2]"
				sl_service = sl_service.Mask(t_mask1)
				Expect(sl_service.Options.Mask).To(HaveValue(Equal(t_mask1)))
				// Mask("test,test2") should set the mask to be "mask[test,test2]" aka t_mask1
				sl_service = sl_service.Mask("test,test2")
				Expect(sl_service.Options.Mask).To(HaveValue(Equal(t_mask1)))
			})
		})
		Context("SoftLayer_Hardware_Server::allowAccessToNetworkStorageList", func() {
			It("API Call Test", func() {
				_, err := sl_service.AllowAccessToNetworkStorageList(nil)
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::bootToRescueLayer", func() {
			It("API Call Test", func() {
				_, err := sl_service.BootToRescueLayer(nil)
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::createFirmwareReflashTransaction", func() {
			It("API Call Test", func() {
				_, err := sl_service.CreateFirmwareReflashTransaction(nil, nil, nil)
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::createFirmwareUpdateTransaction", func() {
			It("API Call Test", func() {
				_, err := sl_service.CreateFirmwareUpdateTransaction(nil, nil, nil, nil, nil)
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::editObject", func() {
			It("API Call Test", func() {
				_, err := sl_service.EditObject(nil)
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getActiveComponents", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetActiveComponents()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getAllowedHost", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetAllowedHost()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getAttachedNetworkStorages", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetAttachedNetworkStorages(nil)
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getBandwidthAllotmentDetail", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetBandwidthAllotmentDetail()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getBillingCycleBandwidthUsage", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetBillingCycleBandwidthUsage()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getBillingItem", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetBillingItem()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getComponents", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetComponents()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getFrontendNetworkComponents", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetFrontendNetworkComponents()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getHardDrives", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetHardDrives()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getMetricTrackingObjectId", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetMetricTrackingObjectId()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getNetworkComponents", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetNetworkComponents()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getNetworkVlans", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetNetworkVlans()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getObject", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetObject()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getOperatingSystem", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetOperatingSystem()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getRemoteManagementAccounts", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetRemoteManagementAccounts()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getSensorData", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetSensorData()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::getTagReferences", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetTagReferences()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::powerCycle", func() {
			It("API Call Test", func() {
				_, err := sl_service.PowerCycle()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::powerOff", func() {
			It("API Call Test", func() {
				_, err := sl_service.PowerOff()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::powerOn", func() {
			It("API Call Test", func() {
				_, err := sl_service.PowerOn()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::rebootDefault", func() {
			It("API Call Test", func() {
				_, err := sl_service.RebootDefault()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::rebootSoft", func() {
			It("API Call Test", func() {
				_, err := sl_service.RebootSoft()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::reloadOperatingSystem", func() {
			It("API Call Test", func() {
				_, err := sl_service.ReloadOperatingSystem(nil, nil)
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::setPrivateNetworkInterfaceSpeed", func() {
			It("API Call Test", func() {
				_, err := sl_service.SetPrivateNetworkInterfaceSpeed(nil, nil)
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::setPublicNetworkInterfaceSpeed", func() {
			It("API Call Test", func() {
				_, err := sl_service.SetPublicNetworkInterfaceSpeed(nil, nil)
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::setTags", func() {
			It("API Call Test", func() {
				_, err := sl_service.SetTags(nil)
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::setUserMetadata", func() {
			It("API Call Test", func() {
				_, err := sl_service.SetUserMetadata(nil)
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Hardware_Server::toggleManagementInterface", func() {
			It("API Call Test", func() {
				_, err := sl_service.ToggleManagementInterface(nil)
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
	})

})
