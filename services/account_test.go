// AUTO GENERATED by tools/loadmeta.go
package services_test

import (
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/softlayer/softlayer-go/services"
	"github.com/softlayer/softlayer-go/session/sessionfakes"
)

var _ = Describe("Account Tests", func() {
	var slsession *sessionfakes.FakeSLSession
	BeforeEach(func() {
		slsession = &sessionfakes.FakeSLSession{}
	})

	Context("Testing SoftLayer_Account service", func() {
		var sl_service services.Account
		BeforeEach(func() {
			sl_service = services.GetAccountService(slsession)
		})
		Context("SoftLayer_Account Set Options", func() {
			It("Set Options properly", func() {
				t_id := 1234
				t_filter := "{'testFilter':{'test'}}"
				t_limit := 100
				t_offset := 5
				sl_service = sl_service.Id(t_id).Filter(t_filter).Offset(t_offset).Limit(t_limit)
				Expect(sl_service.Options.Id).To(HaveValue(Equal(t_id)))
				Expect(sl_service.Options.Filter).To(HaveValue(Equal(t_filter)))
				Expect(sl_service.Options.Limit).To(HaveValue(Equal(t_limit)))
				Expect(sl_service.Options.Offset).To(HaveValue(Equal(t_offset)))
			})
		})
		Context("SoftLayer_Account Set Mask", func() {
			It("Set Options properly", func() {
				t_mask1 := "mask[test,test2]"
				sl_service = sl_service.Mask(t_mask1)
				Expect(sl_service.Options.Mask).To(HaveValue(Equal(t_mask1)))
				// Mask("test,test2") should set the mask to be "mask[test,test2]" aka t_mask1
				sl_service = sl_service.Mask("test,test2")
				Expect(sl_service.Options.Mask).To(HaveValue(Equal(t_mask1)))
			})
		})
		Context("SoftLayer_Account::getActiveAccountLicenses", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetActiveAccountLicenses()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getActiveQuotes", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetActiveQuotes()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getActiveVirtualLicenses", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetActiveVirtualLicenses()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getAllTopLevelBillingItems", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetAllTopLevelBillingItems()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getApplicationDeliveryControllers", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetApplicationDeliveryControllers()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getBandwidthAllotments", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetBandwidthAllotments()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getClosedTickets", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetClosedTickets()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getCurrentUser", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetCurrentUser()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getDedicatedHosts", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetDedicatedHosts()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getDomains", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetDomains()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getExpiredSecurityCertificates", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetExpiredSecurityCertificates()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getGlobalIpRecords", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetGlobalIpRecords()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getGlobalIpv4Records", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetGlobalIpv4Records()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getGlobalIpv6Records", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetGlobalIpv6Records()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getHardware", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetHardware()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getHourlyVirtualGuests", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetHourlyVirtualGuests()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getHubNetworkStorage", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetHubNetworkStorage()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getInvoices", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetInvoices()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getIscsiNetworkStorage", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetIscsiNetworkStorage()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getMonthlyVirtualGuests", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetMonthlyVirtualGuests()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getNasNetworkStorage", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetNasNetworkStorage()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getNetworkGateways", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetNetworkGateways()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getNetworkMessageDeliveryAccounts", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetNetworkMessageDeliveryAccounts()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getNetworkStorage", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetNetworkStorage()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getNetworkTunnelContexts", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetNetworkTunnelContexts()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getNetworkVlans", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetNetworkVlans()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getObject", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetObject()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getOpenTickets", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetOpenTickets()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getPlacementGroups", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetPlacementGroups()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getPortableStorageVolumes", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetPortableStorageVolumes()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getPostProvisioningHooks", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetPostProvisioningHooks()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getPrivateBlockDeviceTemplateGroups", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetPrivateBlockDeviceTemplateGroups()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getPrivateNetworkVlans", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetPrivateNetworkVlans()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getReservedCapacityGroups", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetReservedCapacityGroups()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getRouters", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetRouters()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getRwhoisData", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetRwhoisData()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getSecurityCertificates", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetSecurityCertificates()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getSshKeys", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetSshKeys()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getSubnets", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetSubnets()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getTickets", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetTickets()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getUpgradeRequests", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetUpgradeRequests()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getUsers", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetUsers()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getValidSecurityCertificates", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetValidSecurityCertificates()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getVirtualDedicatedRacks", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetVirtualDedicatedRacks()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
		Context("SoftLayer_Account::getVirtualGuests", func() {
			It("API Call Test", func() {
				_, err := sl_service.GetVirtualGuests()
				Expect(err).To(Succeed())
				Expect(slsession.DoRequestCallCount()).To(Equal(1))
			})
		})
	})

})
