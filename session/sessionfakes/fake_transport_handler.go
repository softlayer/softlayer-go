// Code generated by counterfeiter. DO NOT EDIT.
package sessionfakes

import (
	"sync"

	"github.com/softlayer/softlayer-go/session"
	"github.com/softlayer/softlayer-go/sl"
)

type FakeTransportHandler struct {
	DoRequestStub        func(*session.Session, string, string, []interface{}, *sl.Options, interface{}) error
	doRequestMutex       sync.RWMutex
	doRequestArgsForCall []struct {
		arg1 *session.Session
		arg2 string
		arg3 string
		arg4 []interface{}
		arg5 *sl.Options
		arg6 interface{}
	}
	doRequestReturns struct {
		result1 error
	}
	doRequestReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTransportHandler) DoRequest(arg1 *session.Session, arg2 string, arg3 string, arg4 []interface{}, arg5 *sl.Options, arg6 interface{}) error {
	var arg4Copy []interface{}
	if arg4 != nil {
		arg4Copy = make([]interface{}, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.doRequestMutex.Lock()
	ret, specificReturn := fake.doRequestReturnsOnCall[len(fake.doRequestArgsForCall)]
	fake.doRequestArgsForCall = append(fake.doRequestArgsForCall, struct {
		arg1 *session.Session
		arg2 string
		arg3 string
		arg4 []interface{}
		arg5 *sl.Options
		arg6 interface{}
	}{arg1, arg2, arg3, arg4Copy, arg5, arg6})
	fake.recordInvocation("DoRequest", []interface{}{arg1, arg2, arg3, arg4Copy, arg5, arg6})
	fake.doRequestMutex.Unlock()
	if fake.DoRequestStub != nil {
		return fake.DoRequestStub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.doRequestReturns
	return fakeReturns.result1
}

func (fake *FakeTransportHandler) DoRequestCallCount() int {
	fake.doRequestMutex.RLock()
	defer fake.doRequestMutex.RUnlock()
	return len(fake.doRequestArgsForCall)
}

func (fake *FakeTransportHandler) DoRequestCalls(stub func(*session.Session, string, string, []interface{}, *sl.Options, interface{}) error) {
	fake.doRequestMutex.Lock()
	defer fake.doRequestMutex.Unlock()
	fake.DoRequestStub = stub
}

func (fake *FakeTransportHandler) DoRequestArgsForCall(i int) (*session.Session, string, string, []interface{}, *sl.Options, interface{}) {
	fake.doRequestMutex.RLock()
	defer fake.doRequestMutex.RUnlock()
	argsForCall := fake.doRequestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeTransportHandler) DoRequestReturns(result1 error) {
	fake.doRequestMutex.Lock()
	defer fake.doRequestMutex.Unlock()
	fake.DoRequestStub = nil
	fake.doRequestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransportHandler) DoRequestReturnsOnCall(i int, result1 error) {
	fake.doRequestMutex.Lock()
	defer fake.doRequestMutex.Unlock()
	fake.DoRequestStub = nil
	if fake.doRequestReturnsOnCall == nil {
		fake.doRequestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.doRequestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransportHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.doRequestMutex.RLock()
	defer fake.doRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTransportHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ session.TransportHandler = new(FakeTransportHandler)
